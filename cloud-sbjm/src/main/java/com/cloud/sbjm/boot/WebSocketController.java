package com.cloud.sbjm.boot;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.messaging.handler.annotation.MessageMapping;import org.springframework.messaging.handler.annotation.SendTo;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.stereotype.Controller;import com.cloud.sbjm.domain.UserInfo;import com.cloud.sbjm.onput.ChatRoomRequest;import com.cloud.sbjm.onput.ChatRoomResponse;@Controllerpublic class WebSocketController {    @Autowired    private SimpMessagingTemplate template;    //广播后台主动推送消息    //@Scheduled(fixedRate = 5000)    public void sendTopicMessage() {        System.out.println("后台广播推送！");        UserInfo user = new UserInfo();        user.setUserName("oyzc");        user.setAge(10);        this.template.convertAndSend("/topic/getResponse", user);    }    //一对一后台根据ID主动推送消息    //@Scheduled(fixedRate = 5000)    public void sendQueueMessage() {        System.out.println("后台一对一推送！");        UserInfo user = new UserInfo();        user.setUserInfoId(1);        user.setUserName("oyzc");        user.setAge(10);        this.template.convertAndSendToUser(user.getUserInfoId() + "", "/queue/getResponse", user);    }    //客户端主动发送消息到服务端，服务端马上回应指定的客户端消息    //类似http无状态请求，但是有质的区别    //websocket可以从服务器指定发送哪个客户端，而不像http只能响应请求端    //群发    @MessageMapping("/massRequest")    //SendTo 发送至 Broker 下的指定订阅路径    @SendTo("/mass/getResponse")    public ChatRoomResponse mass(ChatRoomRequest chatRoomRequest) {        //方法用于广播测试        System.out.println("name = " + chatRoomRequest.getName());        System.out.println("chatValue = " + chatRoomRequest.getChatValue());        ChatRoomResponse response = new ChatRoomResponse();        response.setName(chatRoomRequest.getName());        response.setChatValue(chatRoomRequest.getChatValue());        return response;    }    //单独聊天    @MessageMapping("/aloneRequest")    public ChatRoomResponse alone(ChatRoomRequest chatRoomRequest) {        //方法用于一对一测试        System.out.println("userId = " + chatRoomRequest.getUserId());        System.out.println("name = " + chatRoomRequest.getName());        System.out.println("chatValue = " + chatRoomRequest.getChatValue());        ChatRoomResponse response = new ChatRoomResponse();        response.setName(chatRoomRequest.getName());        response.setChatValue(chatRoomRequest.getChatValue());        this.template.convertAndSendToUser(chatRoomRequest.getUserId() + "", "/alone/getResponse", response);        return response;    }}