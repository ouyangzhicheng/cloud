package com.cloud.sbjm.boot;import java.io.IOException;import java.util.concurrent.TimeUnit;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.cloud.sbjm.common.Constant;import com.cloud.sbjm.common.VerifyCodeUtils;import com.cloud.sbjm.domain.UserInfo;import com.cloud.sbjm.onput.AllRoleResponse;import com.cloud.sbjm.onput.BaseRequest;import com.cloud.sbjm.onput.BaseResponse;import com.cloud.sbjm.onput.PageListResponse;import com.cloud.sbjm.onput.UserIdRequest;import com.cloud.sbjm.onput.UserListRequest;import com.cloud.sbjm.onput.UserLoginRequest;import com.cloud.sbjm.onput.UserLoginResponse;import com.cloud.sbjm.onput.UserRequest;import com.cloud.sbjm.onput.UserResponse;import com.cloud.sbjm.service.UserService;/** * @author ouyangzhicheng * @version V1.0 * @Title: UserController.java * @Description: 用户控制器类 * @date 2018年2月6日 */@Controller@RequestMapping(value = "/user")public class UserController {    @Autowired    private UserService userService;    @Autowired    private RedisTemplate<String, Object> redisTemplate;    //从 application.properties 中读取配置，如取不到默认值为HelloShanhy    @Value("${application.hello:Hello Angel}")    private String hello;    /**     * 后台根据Id查询用户     *     * @param request     * @return     */    @RequestMapping(value = "/findUserById", method = RequestMethod.POST)    @ResponseBody    public UserResponse getUserList(@RequestBody UserIdRequest request) {        UserResponse response = new UserResponse();        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        response.setUservo(userService.queryUserVoById(request));        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        System.out.println(response.getUservo());        return response;    }    /**     * 后台查询用户列表     *     * @param request     * @return     */    @RequestMapping(value = "/findUserList", method = RequestMethod.POST)    @ResponseBody    public PageListResponse<UserInfo> getUserlist(@RequestBody UserListRequest request) {        PageListResponse<UserInfo> response = new PageListResponse<UserInfo>(request.getSeq());        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        response.setData((userService.queryUserList(request)));        response.setTotal(userService.queryUsertotal(request));        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        return response;    }    /**     * 后台用户登录     *     * @param request     * @return     */    @RequestMapping(value = "/login", method = RequestMethod.POST)    @ResponseBody    public UserLoginResponse login(@RequestBody UserLoginRequest request) {        UserLoginResponse response = new UserLoginResponse();        System.out.println(request);        //1.校验输入的验证码        //根据随机码（生成验证码时放进redis的Key值）获取对应的验证码        String verifyCode = (String) redisTemplate.opsForValue().get(request.getRandom());        if (verifyCode == null) {            response.setCode(Constant.VERIFYCODE_ERROR_CODE);            response.setMsg(Constant.VERIFYCODE_ERROR_MSG);            return response;        }        if (!verifyCode.equals(request.getVerifyCode())) {            response.setCode(Constant.VERIFYCODE_ERROR_CODE);            response.setMsg(Constant.VERIFYCODE_ERROR_MSG);            return response;        }        response = userService.login(request, response);        return response;    }    /**     * 后台生成验证码,并将图片下载到页面     *     * @param     * @return     * @throws IOException     */    @RequestMapping("/getVerifyCode/{random}")    public void getVerifyCode(@PathVariable String random, HttpServletResponse response) throws IOException {        if (random != null && !random.equals("")) {            response.setHeader("Pragma", "No-cache");            response.setHeader("Cache-Control", "no-cache");            response.setDateHeader("Expires", 0);            response.setContentType("image/jpeg");            String verifyCode = VerifyCodeUtils.generateVerifyCode(4);            redisTemplate.opsForValue().set(random, verifyCode, 1, TimeUnit.MINUTES);            int w = 200, h = 80;            VerifyCodeUtils.outputImage(w, h, response.getOutputStream(), verifyCode);        }    }    /**     * 新增用户     *     * @param request     * @return     * @throws IOException     */    @RequestMapping(value = "/saveSystemUser", method = RequestMethod.POST)    public @ResponseBody    BaseResponse addSystemUser(@RequestBody UserRequest request) {        BaseResponse response = new BaseResponse();        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        System.out.println(request);        userService.saveSystemUser(request);        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        return response;    }    /**     * 修改用户     *     * @param request     * @return     * @throws IOException     */    @RequestMapping(value = "/editSystemUser", method = RequestMethod.POST)    public @ResponseBody    BaseResponse editSystemUser(@RequestBody UserRequest request) {        BaseResponse response = new BaseResponse();        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        System.out.println(request);        userService.updateSystemUser(request);        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        return response;    }    /**     * 删除用户     *     * @param request     * @return     * @throws IOException     */    @RequestMapping(value = "/deleteSystemUser", method = RequestMethod.POST)    public @ResponseBody    BaseResponse deleteSystemUser(@RequestBody UserIdRequest request) {        BaseResponse response = new BaseResponse();        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        userService.deleteSystemUser(request);        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        return response;    }    /**     * 获取所有的用户角色     *     * @param request     * @return     * @throws IOException     */    @RequestMapping(value = "/queryAllRole", method = RequestMethod.POST)    public @ResponseBody    AllRoleResponse queryAllRole(@RequestBody BaseRequest request) {        AllRoleResponse response = new AllRoleResponse();        if (request.getSeq() == null) {            response.setCode(Constant.USER_SEQ_IS_NULL_CODE);            response.setMsg(Constant.USER_SEQ_IS_NULL_MSG);            return response;        }        response.setRoleList(userService.getAllRole());        response.setCode(Constant.SUCCESS_CODE);        response.setMsg(Constant.SUCCESS_MSG);        return response;    }    /**     * 获取所有的用户角色     *     * @param request     * @return     * @throws IOException     */        @RequestMapping(value = "/testt", method = RequestMethod.POST)    public @ResponseBody AllRoleResponse testt(HttpServletRequest request) {        AllRoleResponse response = new AllRoleResponse();       System.out.println("####");       String name=request.getParameter("name");       System.out.println(name);        return response;    }}